apply plugin: 'com.android.library'

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
            jniLibs.srcDir 'src/main/libs'
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }
}

//allprojects {
//    repositories {
//        jcenter()
//        flatDir {
//            dirs 'libs'
//        }
//    }
//}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.google.guava:guava:19.0'
    compile 'com.google.code.gson:gson:2.3.1'
}


/*
  * NDK Build Environment
  */
//    sourceSets.main {
//        jniLibs.srcDir 'src/main/libs'
//        jni.srcDirs = []
//    }
//
//    //noinspection GroovyAssignabilityCheck
//    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
//        Properties properties = new Properties()
//        properties.load(project.rootProject.file('local.properties').newDataInputStream())
//
//        def command = properties.getProperty('ndk.dir')
//        def isDebug = false
//        if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
//            //windows OS
//            command += "\\ndk-build.cmd"
//            isDebug = properties.getProperty('ndk.debug')
//        }else{
//            //Linux ndk build cmd
//            command += "/ndk-build"
//            if(properties.getProperty('ndk.debug')!=null){
//                isDebug = properties.getProperty('ndk.debug').toBoolean()
//            }
//        }
//
//        if (isDebug) {
//            commandLine command, 'NDK_DEBUG=1', '-C', file('src/main').absolutePath
//        } else {
//            commandLine command, '-C', file('src/main').absolutePath
//        }
//    }
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn ndkBuild
//    }
//    buildTypes {
//        debug {
//            jniDebuggable true
//        }
//    }
